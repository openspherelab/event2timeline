<!-- #
#
# Event2Timeline by @tomchop_ for CERT Societe Generale (@CertSG)
# https://cert.societegenerale.com/
#
# -->

<!DOCTYPE html>
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html;charset=utf-8">
		<title>Session timeline</title>
		<script type="text/javascript" src="d3.v2.js"></script>
		<style type="text/css">

		#title {
			font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
		}
		line {
			shape-rendering: crispEdges;
			pointer-events:none;
		}

		.focus line {
			fill: none;
			stroke: #000;
			shape-rendering: crispEdges;
			pointer-events:none;
		}

		rect.overlay {
			fill: none;
			pointer-events:all;
  			z-index: -1000;
		}

		.axis path,
		.axis line {
		  fill: none;
		  stroke: #000;
		  shape-rendering: crispEdges;
		}

		g.mini {
			margin-top:30px;
		}

		.mini text {
			font: 9px sans-serif;	
			
		}

		.mini text.smalltext {
			font: 2px sans-serif;
		}

		.main text {
			font: 12px sans-serif;	
			pointer-events:none;
		}

		.brush .extent {
			stroke: gray;
			fill: dodgerblue;
			fill-opacity: .365;
		}

		div.tooltip {   
			  position: absolute;           
			  text-align: center;           
			  padding: 2px;             
			  font: 12px sans-serif;        
			  background: lightsteelblue;   
			  border: 1px solid #4573a1;      
			  pointer-events: none;         
			}

		div.tooltip th {
			text-align: right;
		}
		div.tooltip td {
			text-align: left;
		}

		</style>
	</head>
	<body>

		<script type="text/javascript" src='evtdata.js'></script>
		<div><h1 id='title'></h1></div>
		<script type="text/javascript">

		d3.select('#title').text('Timeline for ' + filename)

		var color = d3.scale.ordinal()
	    .range(["#e60028", "#873d67", "#3e7eaf", "#d55a39", "#1a9656", "#666666", "#d24b28", "#0ac8dc", "#82379b", "#a50041", "#a0af00", "#ffa02d", "#c30082", "#00a550", "#64a0c8", "#c864cd", "#dc4b69", "#9be173", "#ffb414", "#e1648c", "#9178d2", "#6e3c28"])

	    winwidth = window.innerWidth
	    winheight = window.innerHeight

	    // script inspired by https://gist.github.com/slojo404/2416297

		var m = [20, 20, 15, 200], //top right bottom left
			w = winwidth - m[1] - m[3]

			miniHeight = laneLength * 15
			mainHeight = winheight - miniHeight - 50
			mainHeight = laneLength * 20
			h = miniHeight + mainHeight + 80


		var parseDate = d3.time.format("%Y-%m-%d %H:%M:%S").parse; //2013-05-22 15:00:00


		var x = d3.time.scale()
			.domain([parseDate(timeBegin), parseDate(timeEnd)])
	    	.range([0, w]);

	    var x1 = d3.time.scale()
	    	.range([0, w]);

	    var miniAxis = d3.svg.axis().scale(x).orient("bottom");
    	var mainAxis = d3.svg.axis().scale(x1).orient("bottom");


		var y1 = d3.scale.linear()
				.domain([0, laneLength])
				.range([0, mainHeight]);
		var y2 = d3.scale.linear()
				.domain([0, laneLength])
				.range([0, miniHeight]);

		var chart = d3.select("body")
					.append("svg")
					.attr("width", w + m[1] + m[3])
					.attr("height", h + m[0] + m[2])
					.attr("class", "chart");
		
		chart.append("defs").append("clipPath")
			.attr("id", "clip")
			.append("rect")
			.attr("width", w)
			.attr("height", mainHeight);

		var main = chart.append("g")
					.attr("transform", "translate(" + m[3] + "," + m[0] + ")")
					.attr("width", w)
					.attr("height", mainHeight)
					.attr("class", "main");

		

		var mini = chart.append("g")
					.attr("transform", "translate(" + m[3] + "," + (mainHeight + m[0] + 50) + ")")
					.attr("width", w)
					.attr("height", miniHeight)
					.attr("class", "mini");

		main.append("g")
	      .attr("class", "x axis")
	      .attr("transform", "translate(0," + mainHeight + ")")
	      .call(mainAxis);


	      // focus line

	      rect = main.append("rect")
		      .attr("class", "overlay")
		      .attr("width", w)
		      .attr("height", mainHeight)

      	

		mini.append("g")
	      .attr("class", "x axis")
	      .attr("transform", "translate(0," + miniHeight + ")")
	      .call(miniAxis);


	    

		
		//main lanes and texts
		main.append("g").selectAll(".laneLines")
			.data(items)
			.enter().append("line")
			.attr("x1", 0)
			.attr("y1", function(d) {return y1(d.lane);})
			.attr("x2", w)
			.attr("y2", function(d) {return y1(d.lane);})
			.attr("stroke", "lightgray")

		main.append("g").selectAll(".laneText")
			.data(lanes)
			.enter().append("text")
			.text(function(d) {
				return d;
			})
			.attr("x", -m[1])
			.attr("y", function(d, i) {return y1(i + .5);})
			.attr("dy", ".5ex")
			.attr("text-anchor", "end")
			.attr("class", "laneText");
		
		//mini lanes and texts
		mini.append("g").selectAll(".laneLines")
			.data(items)
			.enter().append("line")
			.attr("x1", 0)
			.attr("y1", function(d) {return y2(d.lane);})
			.attr("x2", w)
			.attr("y2", function(d) {return y2(d.lane);})
			.attr("stroke", "lightgray");

		mini.append("g").selectAll(".laneText")
			.data(lanes)
			.enter().append("text")
			.text(function(d) {return d;})
			.attr("x", -m[1])
			.attr("y", function(d, i) {return y2(i + .5);})
			.attr("dy", ".5ex")
			.attr("text-anchor", "end")
			.attr("class", "laneText");

		var itemRects = main.append("g")
							.attr("clip-path", "url(#clip)");
		
		//mini item rects
		mini.append("g").selectAll("miniItems")
			.data(items)
			.enter().append("rect")
			.attr("class", function(d) {return "miniItem" + d.lane;})
			.attr("x", function(d) {return x(parseDate(d.start));})
			.attr("y", function(d) {return y2(d.lane + .5) - 5;})
			.attr("width", function(d) {
				return x(parseDate(d.end)) - x(parseDate(d.start));
			})
			.attr("height", 10)
			.style("fill", function(d) {
		      	return color(d['lane'])
		      });

		//brush
		var brush = d3.svg.brush()
							.x(x)
							.on("brush", display);

		mini.append("g")
			.attr("class", "x brush")
			.call(brush)
			.selectAll("rect")
			.attr("y", 1)
			.attr("height", miniHeight - 1);

		var focus = main.append('g').attr('class','focus')
		focus_line = focus.append('line').attr('x1',0).attr('y1',0).attr('x2',0).attr('y2',mainHeight)
		focustext = focus.append('text')
							.attr("x", 9)
					      	.attr("dy", ".35em");

		rect.on('mouseover', function() {focus.style("display",null)});
		rect.on('mouseout', function() {focus.style("display",'none')});
		rect.on('mousemove', focusmove);

		display();

		function focusmove() {
			
			date = x1.invert(d3.mouse(this)[0])
			format = d3.time.format('%X %x')
			date = format(date)
			focus.attr('transform','translate('+d3.mouse(this)[0]+',0)')
			focustext.attr('y', d3.mouse(this)[1])
			focustext.text(date)
		}


		function display() {
			var rects, labels,
				minExtent = brush.extent()[0],
				maxExtent = brush.extent()[1],
				visItems = items.filter(function(d) {
					return parseDate(d.start) < maxExtent && parseDate(d.end) > minExtent;
				});

			mini.select(".brush")
				.call(brush.extent([minExtent, maxExtent]));

			main.select(".x.axis").call(mainAxis);

			x1.domain([minExtent, maxExtent]);

			// div for popup
			var div = d3.select("body").append("div")   
			    .attr("class", "tooltip")               
			    .style("opacity", 0);

			//update main item rects
			rects = itemRects.selectAll("rect")
			        .data(visItems, function(d) { return d.id; })
				.attr("x", function(d) { return x1(parseDate(d.start)); })
				.attr("width", function(d) { return x1(parseDate(d.end)) - x1(parseDate(d.start)); });
			
			rects.enter().append("rect")
				.attr("class", function(d) { return "miniItem" + d.lane; })
				.attr("x", function(d) { return x1(parseDate(d.start)); })
				.attr("y", function(d) { return y1(d.lane) + 2; })
				.attr("width", function(d) {
					return x1(parseDate(d.end)) - x1(parseDate(d.start));
				})
				.attr("height", function(d) { return .8 * y1(1); })
				.style("fill", function(d) {
			      	return color(d['lane'])
			      })
				.on("mouseover", function(d) {      
		            div.style("opacity", .9);      
		            div .html("<table>"+display_data(d)+"</table>")
		                .style("left", (d3.event.pageX + 20) + "px")     
		                .style("top", (d3.event.pageY) + "px");    
		            })      
		        .on('mousemove', function(d) {
		        	div.style("left", (d3.event.pageX + 20) + "px")     
		                .style("top", (d3.event.pageY) + "px");    
		        })            
		        .on("mouseout", function(d) {       
		            div.style("opacity", 0);   
		        });


			rects.exit().remove();
		}

		function display_data(data) {
			display = ""
			for (var key in data) {
				if (typeof(data[key]) === 'object') {
					
					display += display_data(data[key])
				}
				else {
					if (key != 'lane') // add here fields you wish to hide
			    		display += "<tr><th>"+key+"</th><td>"+data[key]+"</td></tr>"
				}
			}
			return display
		}
		
		</script>
	</body>
</html>